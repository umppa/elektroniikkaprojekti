


#include <LiquidCrystal.h>                 //näytön kirjasto
#include <MsTimer2.h>                      //keskeytyspalvelimen kirjasto
String valikot[] = { "KELLO", "PUMPUT", "ANTURIT" };
String p_maara[] = { "MA", "TI", "KE", "TO", "PE", "LA", "SU", "XX" };
String p_flag[] = { "ON", "OFF" };


#define trigPin 13
#define echoPin 12
#define kirkkaus 10
#define paluu




byte downArrow[8] = {
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b10101, // * * *
	0b01110, //  ***
	0b00100  //   *
};

byte upArrow[8] = {
	0b00100, //   *
	0b01110, //  ***
	0b10101, // * * *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100  //   *
};

byte menuCursor[8] = {
	B01000, //  *
	B00100, //   *
	B00010, //    *
	B00001, //     *
	B00010, //    *
	B00100, //   *
	B01000, //  *
	B00000  //
};

byte up[8] = {
	0b00100, //   *
	0b01110, //  ***
	0b10001, // *   *
	0b00000, //  
	0b00000, //   
	0b00000, //   
	0b00000, //   
	0b00000  //   
};

int lcd_key = 0;
int sekunnit = 0;
int minuutit = 21;
int tunnit = 9;
int paivat = 0;
int sekunnit1 = 0;
int minuutit1 = 0;
int tunnit1 = 0;
int paivat1 = 0;
int menuPage = 0;
int maxMenuPages = 1.5;
int cursorPosition = 0;
int readKey;
int savedDistance = 0;
int button;
int e = 0;
int f = 0;
int flag = 1;



LiquidCrystal lcd(8, 9, 4, 5, 6, 7);      //alustaa lcd-näytön pinnit

void sekunti()                            //keskeytyspalvelimen funktio, joka lisää sekuntteja kelloon 
{
	sekunnit = sekunnit + 1;
	aika();
}

void aika() {                             //muuntaa sekunnit minuuteiksi ja tunneiksi
	if (sekunnit >= 60)
	{
		sekunnit = 0;
		minuutit = minuutit + 1;
	}
	if (minuutit >= 60)
	{
		minuutit = 0;
		tunnit = tunnit + 1;
	}
	if (tunnit >= 24)
	{
		tunnit = 0;
		paivat++;
	}
	if (paivat > 6)
	{
		paivat = 0;
	}
}

void kello()
{
	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print(p_maara[paivat]);
	lcd.print(" ");
	if (tunnit < 10)
	{
		lcd.setCursor(3, 0);
		lcd.print("0");
		lcd.print(tunnit);
	}
	if (tunnit >= 10)
	{
		lcd.setCursor(3, 0);
		lcd.print(tunnit);
	}
	if (tunnit < 0) tunnit = 0;

	if (tunnit >= 24) tunnit = 24;

	lcd.print(":");
	if (minuutit < 10)
	{
		lcd.setCursor(6, 0);
		lcd.print("0");
		lcd.print(minuutit);
	}
	if (minuutit >= 10)
	{
		lcd.setCursor(6, 0);
		lcd.print(minuutit);
		//lcd.print(":");
	}
}

void nuoli()
{
	Serial.println(paivat);
	Serial.println(tunnit);
	Serial.println(minuutit);
	Serial.print("\n");
	int activeButton = 0;
	lcd.setCursor(0, 1);
	lcd.write(byte(3));
	delay(200);

	while (activeButton == 0)
	{

		Serial.print("1");
		readKey = analogRead(0);
		button = evaluateButton(readKey);


		if (button == 1) {
			lcd.setCursor(0, 1);
			lcd.print("                ");
			e = e + 3;
			delay(200);
			if (e > 6) {
				e = 0;
			}
			lcd.setCursor(e, 1);
			lcd.write(byte(3));

		}
		if (button == 5) {
			lcd.setCursor(0, 1);
			lcd.print("                ");
			delay(500);
			return;
		}
		if (button == 2) {
			if (e == 0) {
				paivat++;
				delay(300);
				lcd.setCursor(0, 0);
				lcd.print("  ");
				lcd.setCursor(0, 0);
				if (paivat > 6)paivat = 0;
				lcd.print(p_maara[paivat]);

			}
			if (e == 3) {
				tunnit++;
				delay(300);
				if (tunnit >= 24)tunnit = 0;
				if (tunnit<10)
				{
					lcd.setCursor(3, 0);
					lcd.print("0");
					lcd.print(tunnit);
				}
				else
				{
					lcd.setCursor(3, 0);
					lcd.print("  ");
					lcd.setCursor(3, 0);
					lcd.print(tunnit);
				}

			}
			if (e == 6) {
				minuutit++;
				delay(300);
				if (minuutit >= 60)minuutit = 0;
				if (minuutit<10)
				{
					lcd.setCursor(6, 0);
					lcd.print("0");
					lcd.print(minuutit);
				}
				else
				{
					lcd.setCursor(6, 0);
					lcd.print("  ");
					lcd.setCursor(6, 0);
					lcd.print(minuutit);
				}
			}



		}

		
		if (button == 3) {
			if (e == 0) {
				paivat--;
				delay(300);
				lcd.setCursor(0, 0);
				lcd.print("  ");
				lcd.setCursor(0, 0);
				if (paivat < 0)paivat = 6;
				lcd.print(p_maara[paivat]);
			}

			if (e == 3) {
				tunnit--;
				delay(300);
				if (tunnit < 0)tunnit = 23;
				if (tunnit<10)
				{
					lcd.setCursor(3, 0);
					lcd.print("0");
					lcd.print(tunnit);
				}
				else
				{
					lcd.setCursor(3, 0);
					lcd.print("  ");
					lcd.setCursor(3, 0);
					lcd.print(tunnit);
				}
			}

			if (e == 6) {
				minuutit--;
				delay(300);
				if (minuutit < 0)minuutit = 59;
				if (minuutit<10)
				{
					lcd.setCursor(6, 0);
					lcd.print("0");
					lcd.print(minuutit);
				}
				else
				{
					lcd.setCursor(6, 0);
					lcd.print("  ");
					lcd.setCursor(6, 0);
					if (minuutit < 0)minuutit = 59;
					lcd.print(minuutit);
				}
			}
		}
	}
}
void kello2()
{
	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print(p_maara[paivat1]);
	lcd.print(" ");
	if (tunnit1 < 10)
	{
		lcd.setCursor(3, 0);
		lcd.print("0");
		lcd.print(tunnit1);
	}
	if (tunnit1 >= 10)
	{
		lcd.setCursor(3, 0);
		lcd.print(tunnit1);
	}
	if (tunnit1< 0) tunnit1 = 0;

	if (tunnit1 >= 24) tunnit1 = 24;

	lcd.print(":");
	if (minuutit1 < 10)
	{
		lcd.setCursor(6, 0);
		lcd.print("0");
		lcd.print(minuutit1);
	}
	if (minuutit1 >= 10)
	{
		lcd.setCursor(6, 0);
		lcd.print(minuutit1);
		//lcd.print(":");
	}
}
void pump_on() {

	if (tunnit == tunnit1 && minuutit == minuutit1 && paivat1 == 7 && flag == 0) {

		digitalWrite(2, HIGH);
		lcd.setCursor(11, 1);
		delay(2000);
		digitalWrite(2, LOW);
		flag = 1;
	}
	
	if (tunnit == tunnit1 && minuutit == minuutit1 && paivat == paivat1 && flag == 0) {
		
		digitalWrite(2, HIGH);
		lcd.setCursor(11, 1);
		delay(2000);
		digitalWrite(2, LOW);
		flag = 1;
	}
}

void pumppu()
{
	Serial.print(paivat1);
	Serial.print(tunnit1);
	Serial.print(minuutit1);
	Serial.print("\n");
	int activeButton = 0;
	lcd.setCursor(0, 1);
	lcd.write(byte(3));
	delay(200);

	while (activeButton == 0)
	{

		Serial.print("1");
		readKey = analogRead(0);
		button = evaluateButton(readKey);


		if (button == 1) {
			lcd.setCursor(0, 1);
			lcd.print("                ");
			f = f + 3;
			delay(200);
			if (f > 6) {
				f = 0;
			}
			lcd.setCursor(f, 1);
			lcd.write(byte(3));

		}
		if (button == 5) {
			lcd.setCursor(0, 1);
			lcd.print("                ");
			delay(500);
			return;
		}
		if (button == 2) {
			if (f == 0) {
				paivat1++;
				delay(500);
				lcd.setCursor(0, 0);
				lcd.print("  ");
				lcd.setCursor(0, 0);
				if (paivat1 > 7)paivat1 = 0;
				lcd.print(p_maara[paivat1]);

			}
			if (f == 3) {
				tunnit1++;
				delay(300);
				if (tunnit1 >= 24)tunnit1 = 0;
				if (tunnit1<10)
				{
					lcd.setCursor(3, 0);
					lcd.print("0");
					lcd.print(tunnit1);
				}
				else
				{
					lcd.setCursor(3, 0);
					lcd.print("  ");
					lcd.setCursor(3, 0);
					lcd.print(tunnit1);
				}


			}
			if (f == 6) {
				minuutit1++;
				delay(300);
				if (minuutit1 >= 60)minuutit1 = 0;
				if (minuutit1<10)
				{
					lcd.setCursor(6, 0);
					lcd.print("0");
					lcd.print(minuutit1);
				}
				else
				{
					lcd.setCursor(6, 0);
					lcd.print("  ");
					lcd.setCursor(6, 0);
					lcd.print(minuutit1);
				}
			}



		}
		if (button == 3) {
			if (f == 0) {
				paivat1--;
				delay(300);
				if (paivat1 < 0)paivat1 = 7;
				lcd.setCursor(0, 0);
				lcd.print("  ");
				lcd.setCursor(0, 0);

				lcd.print(p_maara[paivat1]);
			}

			if (f == 3) {
				tunnit1--;
				delay(300);
				if (tunnit1 < 0)tunnit1 = 23;
				if (tunnit1<10)
				{
					lcd.setCursor(3, 0);
					lcd.print("0");
					lcd.print(tunnit1);
				}
				else
				{
					lcd.setCursor(3, 0);
					lcd.print("  ");
					lcd.setCursor(3, 0);
					lcd.print(tunnit1);
				}
			}

			if (f == 6) {
				minuutit1--;
				delay(300);
				if (minuutit1 < 0)minuutit1 = 59;
				if (minuutit1<10)
				{
					lcd.setCursor(6, 0);
					lcd.print("0");
					lcd.print(minuutit1);
				}
				else
				{
					lcd.setCursor(6, 0);
					lcd.print("  ");
					lcd.setCursor(6, 0);
					lcd.print(minuutit1);
				}
			}
		}
	}
}


void setup() {
	Serial.begin(9600);


	MsTimer2::set(1000, sekunti);           //keskeytyspalvelin
	MsTimer2::start();
	lcd.begin(16, 2);                       //näytön alustus

	lcd.createChar(0, menuCursor);
	lcd.createChar(1, upArrow);
	lcd.createChar(2, downArrow);
	lcd.createChar(3, up);
	pinMode(2, OUTPUT);
}
void loop()
{
	mainMenuDraw();
	drawCursor();
	operateMainMenu();
	

}

void mainMenuDraw() {
	Serial.print(menuPage);
	lcd.clear();
	lcd.setCursor(1, 0);
	lcd.print(valikot[menuPage]);
	lcd.setCursor(1, 1);
	lcd.print(valikot[menuPage + 1]);
	if (menuPage == 0) {
		lcd.setCursor(15, 1);
		lcd.write(byte(2));
	}
	else if (menuPage > 0 and menuPage < maxMenuPages) {
		lcd.setCursor(15, 1);
		lcd.write(byte(2));
		lcd.setCursor(15, 0);
		lcd.write(byte(1));
	}
	else if (menuPage == maxMenuPages) {
		lcd.setCursor(15, 0);
		lcd.write(byte(1));
	}
}
void drawCursor() {
	for (int x = 0; x < 2; x++) {     // Erases current cursor
		lcd.setCursor(0, x);
		lcd.print(" ");
	}
	if (menuPage % 2 == 0) {
		if (cursorPosition % 2 == 0) {  // If the menu page is even and the cursor position is even that means the cursor should be on line 1
			lcd.setCursor(0, 0);
			lcd.write(byte(0));
		}
		if (cursorPosition % 2 != 0) {  // If the menu page is even and the cursor position is odd that means the cursor should be on line 2
			lcd.setCursor(0, 1);
			lcd.write(byte(0));
		}
	}
	if (menuPage % 2 != 0) {
		if (cursorPosition % 2 == 0) {  // If the menu page is odd and the cursor position is even that means the cursor should be on line 2
			lcd.setCursor(0, 1);
			lcd.write(byte(0));
		}
		if (cursorPosition % 2 != 0) {  // If the menu page is odd and the cursor position is odd that means the cursor should be on line 1
			lcd.setCursor(0, 0);
			lcd.write(byte(0));
		}
	}
}
void operateMainMenu() {
	lcd_key = 0;
	int activeButton = 0;
	while (activeButton == 0) {

		readKey = analogRead(0);
		if (readKey < 790) {
			delay(100);
			readKey = analogRead(0);
		}
		button = evaluateButton(readKey);

		switch (button)
		{

		case 0:
		{
			pump_on();
			break;
		}

		case 1:
		{
			switch (cursorPosition) {
			case 0:
				menuItem1();
				break;
			case 1:
				menuItem2();
				break;
			case 2:
				menuItem3();

			}
			activeButton = 1;
			mainMenuDraw();
			drawCursor();
			break;
		}

		case 2:
		{
			button = 0;
			if (menuPage == 0) {
				cursorPosition = cursorPosition - 1;
				cursorPosition = constrain(cursorPosition, 0, ((sizeof(valikot) / sizeof(String)) - 1));
			}
			if (menuPage % 2 == 0 and cursorPosition % 2 == 0) {
				menuPage = menuPage - 1;
				menuPage = constrain(menuPage, 0, maxMenuPages);
			}

			if (menuPage % 2 != 0 and cursorPosition % 2 != 0) {
				menuPage = menuPage - 1;
				menuPage = constrain(menuPage, 0, maxMenuPages);
			}

			cursorPosition = cursorPosition - 1;
			cursorPosition = constrain(cursorPosition, 0, ((sizeof(valikot) / sizeof(String)) - 1));

			mainMenuDraw();
			drawCursor();
			activeButton = 1;

			break;
		}

		case 3:
		{
			button = 0;
			if (menuPage % 2 == 0 and cursorPosition % 2 != 0) {
				menuPage = menuPage + 1;
				menuPage = constrain(menuPage, 0, maxMenuPages);
			}

			if (menuPage % 2 != 0 and cursorPosition % 2 == 0) {
				menuPage = menuPage + 1;
				menuPage = constrain(menuPage, 0, maxMenuPages);
			}

			cursorPosition = cursorPosition + 1;
			cursorPosition = constrain(cursorPosition, 0, ((sizeof(valikot) / sizeof(String)) - 1));
			mainMenuDraw();
			drawCursor();
			activeButton = 1;

			break;
		}


		}

	}
}
int evaluateButton(int x) {
	int result = 0;
	if (x < 50) {
		result = 1; // right
	}
	else if (x < 195) {
		result = 2; // up
	}
	else if (x < 380) {
		result = 3; // down
	}
	else if (x < 550) {
		result = 4; // left
	}
	else if (x < 790) {
		result = 5; // select
	}
	return result;
}


void menuItem1() {
	int activeButton = 0;

	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print("AJAN VALINTA");
	delay(1000);

	kello();

	while (activeButton == 0) {
		int button;
		readKey = analogRead(0);
		if (readKey < 790) {
			delay(100);
			readKey = analogRead(0);
		}

		button = evaluateButton(readKey);
		switch (button) {
		case 4:
			button = 0;
			activeButton = 1;
			break;
		case 5:
			nuoli();
			break;
		}
	}
}

void menuItem2() {
	int activeButton = 0;

	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print("PUMPPUJEN AJASTUS");
	delay(1000);
	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.write(byte(0));
	kello2();
	lcd.setCursor(13, 0);
	lcd.print("   ");
	lcd.setCursor(13, 0);
	lcd.print(p_flag[flag]);
	while (activeButton == 0) {
		int button;
		readKey = analogRead(0);
		
		
		if (readKey < 790) {
			delay(100);
			readKey = analogRead(0);
		}
		button = evaluateButton(readKey);
		switch (button) {
		
		case 2:
				lcd.setCursor(13, 0);
				lcd.print("   ");
				lcd.setCursor(13, 0);
				lcd.print(p_flag[flag]);
				flag = 0;
		
			break;
		case 3:
			
				lcd.setCursor(13, 0);
				lcd.print("   ");
				lcd.setCursor(13, 0);
				lcd.print(p_flag[flag]);
				flag = 1;
			
			break;
		case 4:
			button = 0;
			activeButton = 1;
			break;
		case 5:
			pumppu();
			break;
		}
	}
}

void menuItem3() {
	int activeButton = 0;

	lcd.clear();
	lcd.setCursor(0, 0);
	lcd.print("LUKEMAT");

	while (activeButton == 0) {
		int button;
		readKey = analogRead(0);
		if (readKey < 790) {
			delay(100);
			readKey = analogRead(0);
		}
		button = evaluateButton(readKey);
		switch (button) {
		case 4:
			button = 0;
			activeButton = 1;
			break;
		}
	}
}
