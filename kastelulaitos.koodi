#include <LiquidCrystal.h>                 //näytön kirjasto
#include <MsTimer2.h>                      //keskeytyspalvelimen kirjasto
#include <Wire.h>

#define btnDOWN   0                       //tilakoneen tilat
#define btnUP     1
#define btnRIGHT  2
#define btnLEFT   3
#define btnSELECT 4

String menuItems[] = { "ITEM 1", "ITEM 2", "ITEM 3", "ITEM 4", "ITEM 5", "ITEM 6" };

int lcd_key = 0;
int readkey;
int sekunnit = 0;
int minuutit = 0;
int tunnit = 0;
int paivat = 0;
int pwm = 0;
int menu_id = 0;
int menu_x = 0;
int menu_y = 0;
int maxMenuPages = round(((sizeof(menuItems) / sizeof(String)) / 2) + .5);
int cursorPosition = 0;
int menuitem_id = 0;

byte downArrow[8] = {
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b10101, // * * *
	0b01110, //  ***
	0b00100  //   *
};

byte upArrow[8] = {
	0b00100, //   *
	0b01110, //  ***
	0b10101, // * * *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100, //   *
	0b00100  //   *
};

byte menuCursor[8] = {
	B01000, //  *
	B00100, //   *
	B00010, //    *
	B00001, //     *
	B00010, //    *
	B00100, //   *
	B01000, //  *
	B00000  //
};


int napit()                               //nappia painettaessa palauttaa ohjelman tiettyyn tilaan.muista laittaa lisää arvoja kun saat casien määrät tietoon
{
	readkey = analogRead(0);
	if (readkey < 50)   return btnRIGHT;  
	menu_x++;

	if (readkey < 195)  return btnUP;  
		menu_y--;
			if (menu_y < 0)
				menu_y = 0;

	if (readkey < 380)  return btnDOWN;   
		menu_y++;
			
	if (readkey < 550)  return btnLEFT;   
		menu_x--;
			if (menu_x < 0)
			menu_x = 0;
	if (readkey < 790)  return btnSELECT; 

}


LiquidCrystal lcd(8, 9, 4, 5, 6, 7);      //alustaa lcd-näytön pinnit

void sekunti()                            //keskeytyspalvelimen funktio, joka lisää sekuntteja kelloon 
{
	sekunnit = sekunnit + 1;
	aika();
}

void aika() {                             //muuntaa sekunnit minuuteiksi ja tunneiksi
	if (sekunnit == 60)
	{
		sekunnit = 0;
		minuutit = minuutit + 1;
	}
	if (minuutit == 60)
	{
		minuutit = 0;
		tunnit = tunnit + 1;
	}
	if (tunnit == 24)
	{
		tunnit = 0;
	}
}

void setup() {
	Serial.begin(9600);
	                 

	MsTimer2::set(1000, sekunti);           //keskeytyspalvelin
	MsTimer2::start();

	lcd.begin(16, 2);                       //näytön alustus

	lcd.createChar(0, menuCursor);
	lcd.createChar(1, upArrow);
	lcd.createChar(2, downArrow);

}
void loop()
{




	lcd_key = napit();                      //nappien funktio

	/*switch (lcd_key)                         //tilakone
	{

	case btnLEFT:
	{
		lcd.clear();
		pwm = 255;
		analogWrite(3, pwm);
		lcd.print(pwm);

	}

	case btnUP:
	{
		lcd.clear();
		pwm = 0;
		analogWrite(3, pwm);
		lcd.print(pwm);
	}

	case btnDOWN:                           //kellonaika
	{*/
		/*lcd.clear();
		if (tunnit < 10)
		{
			lcd.print("0");
			lcd.print(tunnit);
		}
		else
		{
			lcd.print(tunnit);
		}
		lcd.print(":");
		if (minuutit < 10)
		{
			lcd.print("0");
			lcd.print(minuutit);
		}
		else
		{
			lcd.print(minuutit);
		}
		break;*/
	

	//case btnSELECT:                         //minuuttien säätö kellossa
	
		/*minuutit = minuutit + 1;
		lcd.clear();
		if (tunnit < 10)
		{
			lcd.print("0");
			lcd.print(tunnit);
		}
		else
		{
			lcd.print(tunnit);
		}
		lcd.print(":");
		if (minuutit < 10)
		{
			lcd.print("0");
			lcd.print(minuutit);
		}
		else
		{
			lcd.print(minuutit);
		}
		break;*/
	

	//case btnRIGHT:                            //tuntien säätö kellossa
	
		/*tunnit = tunnit + 1;
		lcd.clear();
		if (tunnit < 10)
		{
			lcd.print("0");
			lcd.print(tunnit);
		}
		else
		{
			lcd.print(tunnit);
		}
		lcd.print(":");
		if (minuutit < 10)
		{
			lcd.print("0");
			lcd.print(minuutit);
		}
		else
		{
			lcd.print(minuutit);
		}
		break;*/
	
	}
	void mainMenuDraw() {
		lcd.clear();
		lcd.setCursor(1, 0);
		lcd.print(menuItems[menu_y]);
		lcd.setCursor(1, 1);
		lcd.print(menuItems[menu_y + 1]);
		if (menu_y == 0) {
			lcd.setCursor(15, 1);
			lcd.write(byte(2));
		}
		else if (menuItems > 0 and menuItems < maxMenuPages) {
			lcd.setCursor(15, 1);
			lcd.write(byte(2));
			lcd.setCursor(15, 0);
			lcd.write(byte(1));
		}
		else if (menuItems == maxMenuPages) {
			lcd.setCursor(15, 0);
			lcd.write(byte(1));
		}
	}

	void drawCursor() {
		for (int x = 0; x < 2; x++) {     // Erases current cursor
			lcd.setCursor(0, x);
			lcd.print(" ");
		}
		if (menuPage % 2 == 0) {
			if (cursorPosition % 2 == 0) {  // If the menu page is even and the cursor position is even that means the cursor should be on line 1
				lcd.setCursor(0, 0);
				lcd.write(byte(0));
			}
			if (cursorPosition % 2 != 0) {  // If the menu page is even and the cursor position is odd that means the cursor should be on line 2
				lcd.setCursor(0, 1);
				lcd.write(byte(0));
			}
		}
		if (menuPage % 2 != 0) {
			if (cursorPosition % 2 == 0) {  // If the menu page is odd and the cursor position is even that means the cursor should be on line 2
				lcd.setCursor(0, 1);
				lcd.write(byte(0));
			}
			if (cursorPosition % 2 != 0) {  // If the menu page is odd and the cursor position is odd that means the cursor should be on line 1
				lcd.setCursor(0, 0);
				lcd.write(byte(0));
			}
		}
	}

	void operateMainMenu() {
		int activeButton = 0;
		while (activeButton == 0) {
			int button;
			readKey = analogRead(0);
			if (readKey < 790) {
				delay(100);
				readKey = analogRead(0);
			}
			button = evaluateButton(readKey);
			switch (button) {
			case 0: // When button returns as 0 there is no action taken
				break;
			case 1:  // This case will execute if the "forward" button is pressed
				button = 0;
				switch (cursorPosition) { // The case that is selected here is dependent on which menu page you are on and where the cursor is.
				case 0:
					menuitem_id = 0;
					menuItem()
						break;
				case 1:
					menuitem_id = 1;
					menuItem()
						break;
				case 2:
					menuitem_id = 2;
					menuItem()
						break;
				case 3:
					menuitem_id = 3;
					menuItem()
						break;
				case 4:
					menuitem_id = 4;
					menuItem()
						break;
				case 5:
					menuitem_id = 5;
					menuItem()
						break;
				case 6:
					menuitem_id = 6;
					menuItem()
						break;
				case 7:
					menuitem_id = 7;
					menuItem()
						break;
				case 8:
					menuitem_id = 8;
					menuItem()
						break;
				case 9:
					menuitem_id = 9;
					menuItem()
						break;
				}
				activeButton = 1;
				mainMenuDraw();
				drawCursor();
				break;
			case 2:
				button = 0;
				if (menuPage == 0) {
					cursorPosition = cursorPosition - 1;
					cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));
				}
				if (menuPage % 2 == 0 and cursorPosition % 2 == 0) {
					menuPage = menuPage - 1;
					menuPage = constrain(menuPage, 0, maxMenuPages);
				}

				if (menuPage % 2 != 0 and cursorPosition % 2 != 0) {
					menuPage = menuPage - 1;
					menuPage = constrain(menuPage, 0, maxMenuPages);
				}

				cursorPosition = cursorPosition - 1;
				cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));

				mainMenuDraw();
				drawCursor();
				activeButton = 1;
				break;
			case 3:
				button = 0;
				if (menuPage % 2 == 0 and cursorPosition % 2 != 0) {
					menuPage = menuPage + 1;
					menuPage = constrain(menuPage, 0, maxMenuPages);
				}

				if (menuPage % 2 != 0 and cursorPosition % 2 == 0) {
					menuPage = menuPage + 1;
					menuPage = constrain(menuPage, 0, maxMenuPages);
				}

				cursorPosition = cursorPosition + 1;
				cursorPosition = constrain(cursorPosition, 0, ((sizeof(menuItems) / sizeof(String)) - 1));
				mainMenuDraw();
				drawCursor();
				activeButton = 1;
				break;
			}
		}
	}

	// This function is called whenever a button press is evaluated. The LCD shield works by observing a voltage drop across the buttons all hooked up to A0.
	int evaluateButton(int x) {
		int result = 0;
		if (x < 50) {
			result = 1; // right
		}
		else if (x < 195) {
			result = 2; // up
		}
		else if (x < 380) {
			result = 3; // down
		}
		else if (x < 790) {
			result = 4; // left
		}
		return result;
	}

	// If there are common usage instructions on more than 1 of your menu items you can call this function from the sub
	// menus to make things a little more simplified. If you don't have common instructions or verbage on multiple menus
	// I would just delete this void. You must also delete the drawInstructions()function calls from your sub menu functions.
	void drawInstructions() {
		lcd.setCursor(0, 1); // Set cursor to the bottom line
		lcd.print("Use ");
		lcd.write(byte(1)); // Up arrow
		lcd.print("/");
		lcd.write(byte(2)); // Down arrow
		lcd.print(" buttons");
	}

	void menuItem() { // Function executes when you select the 2nd item from main menu
		int activeButton = 0;

		lcd.clear();
		lcd.setCursor(3, 0);
		lcd.print(menuItems[menuitem_id]);

		while (activeButton == 0) {
			int button;
			readKey = analogRead(0);
			if (readKey < 790) {
				delay(100);
				readKey = analogRead(0);
			}
			button = evaluateButton(readKey);
			switch (button) {
			case 4:  // This case will execute if the "back" button is pressed
				button = 0;
				activeButton = 1;
				break;
			}
		}
	}
}

	
